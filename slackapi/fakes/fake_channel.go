// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotalservices/goulash/slackapi"
)

type FakeChannel struct {
	NameStub        func(slackapi.SlackAPI) string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
		arg1 slackapi.SlackAPI
	}
	nameReturns struct {
		result1 string
	}
	VisibleStub        func(slackapi.SlackAPI) bool
	visibleMutex       sync.RWMutex
	visibleArgsForCall []struct {
		arg1 slackapi.SlackAPI
	}
	visibleReturns struct {
		result1 bool
	}
	IDStub        func() string
	iDMutex       sync.RWMutex
	iDArgsForCall []struct{}
	iDReturns struct {
		result1 string
	}
}

func (fake *FakeChannel) Name(arg1 slackapi.SlackAPI) string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
		arg1 slackapi.SlackAPI
	}{arg1})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub(arg1)
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *FakeChannel) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeChannel) NameArgsForCall(i int) slackapi.SlackAPI {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return fake.nameArgsForCall[i].arg1
}

func (fake *FakeChannel) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeChannel) Visible(arg1 slackapi.SlackAPI) bool {
	fake.visibleMutex.Lock()
	fake.visibleArgsForCall = append(fake.visibleArgsForCall, struct {
		arg1 slackapi.SlackAPI
	}{arg1})
	fake.visibleMutex.Unlock()
	if fake.VisibleStub != nil {
		return fake.VisibleStub(arg1)
	} else {
		return fake.visibleReturns.result1
	}
}

func (fake *FakeChannel) VisibleCallCount() int {
	fake.visibleMutex.RLock()
	defer fake.visibleMutex.RUnlock()
	return len(fake.visibleArgsForCall)
}

func (fake *FakeChannel) VisibleArgsForCall(i int) slackapi.SlackAPI {
	fake.visibleMutex.RLock()
	defer fake.visibleMutex.RUnlock()
	return fake.visibleArgsForCall[i].arg1
}

func (fake *FakeChannel) VisibleReturns(result1 bool) {
	fake.VisibleStub = nil
	fake.visibleReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeChannel) ID() string {
	fake.iDMutex.Lock()
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	} else {
		return fake.iDReturns.result1
	}
}

func (fake *FakeChannel) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeChannel) IDReturns(result1 string) {
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 string
	}{result1}
}

var _ slackapi.Channel = new(FakeChannel)
